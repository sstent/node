// Generated by CoffeeScript 1.3.1
var breakLeft, breakTop, cloneCol, cloneRow, dragStart, dragging, endDragging, finishCol, finishRow, onColMove, onMove, onRowMove, setLeft, setTop, targetIndex;

dragging = null;

onRowMove = onColMove = function() {};

exports.init = function(app, exported, options) {
  var addListener;
  addListener = app.view.dom.addListener;
  addListener(document, 'mousemove', onMove);
  addListener(document, 'mouseup', function() {
    return endDragging();
  });
  addListener(window, 'blur', function() {
    return endDragging(true);
  });
  onRowMove = options.onRowMove, onColMove = options.onColMove;
  exported.rowDown = function(e) {
    return dragStart(e, cloneRow, setTop, breakTop, '.row', finishRow, e.target.parentNode);
  };
  return exported.colDown = function(e) {
    return dragStart(e, cloneCol, setLeft, breakLeft, '.col', finishCol, e.target);
  };
};

onMove = function(e) {
  var breakFn, children, i, last, loc, parent, ref;
  if (!dragging) {
    return;
  }
  parent = dragging.parent, last = dragging.last, breakFn = dragging.breakFn;
  loc = dragging.setFn(e);
  i = 0;
  children = parent.querySelectorAll(dragging.selector);
  while (loc > breakFn(i < last ? children[i] : children[i + 1])) {
    i++;
  }
  if (i !== last) {
    if (!(ref = children[i < last ? i : i + 1])) {
      ref = children[children.length - 1].nextSibling;
    }
    parent.insertBefore(dragging.clone, ref);
  }
  return dragging.last = i;
};

endDragging = function(cancel) {
  if (!dragging) {
    return;
  }
  dragging.finish(cancel);
  document.body.removeChild(dragging.container);
  return dragging = null;
};

targetIndex = function(el) {
  var child, i, _i, _len, _ref;
  _ref = el.parentNode.childNodes;
  for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
    child = _ref[i];
    if (child === el) {
      return i;
    }
  }
};

dragStart = function(e, cloneFn, setFn, breakFn, selector, finish, el) {
  var clone, container, index, nodeOffset, offsetLeft, offsetTop, parent, rect;
  if (e.button !== 0) {
    return;
  }
  if (typeof e.preventDefault === "function") {
    e.preventDefault();
  }
  container = document.createElement('table');
  container.style.position = 'absolute';
  parent = el.parentNode;
  rect = el.getBoundingClientRect();
  nodeOffset = targetIndex(parent.querySelector(selector));
  index = targetIndex(el) - nodeOffset;
  clone = cloneFn(container, el, rect, parent, nodeOffset, index);
  offsetLeft = rect.left - e.clientX;
  offsetTop = rect.top - e.clientY;
  dragging = {
    el: el,
    parent: parent,
    clone: clone,
    nodeOffset: nodeOffset,
    index: index,
    last: index,
    setFn: setFn,
    breakFn: breakFn,
    selector: selector,
    offsetLeft: offsetLeft,
    offsetTop: offsetTop,
    finish: finish,
    container: container
  };
  setLeft.call(dragging, e);
  setTop.call(dragging, e);
  return document.body.appendChild(container);
};

setLeft = function(e) {
  var loc;
  loc = e.clientX;
  this.container.style.left = (loc + window.pageXOffset + this.offsetLeft) + 'px';
  return loc;
};

setTop = function(e) {
  var loc;
  loc = e.clientY;
  this.container.style.top = (loc + window.pageYOffset + this.offsetTop) + 'px';
  return loc;
};

breakLeft = function(el) {
  var rect;
  return el && (rect = el.getBoundingClientRect(), rect.width / 2 + rect.left);
};

breakTop = function(el) {
  var rect;
  return el && (rect = el.getBoundingClientRect(), rect.height / 2 + rect.top);
};

cloneRow = function(container, el, rect, parent) {
  var child, clone, spacerHtml, _i, _len, _ref;
  spacerHtml = '<tr>';
  _ref = el.children;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    child = _ref[_i];
    spacerHtml += "<td style=width:" + child.offsetWidth + "px;height:0;padding:0>";
  }
  clone = el.cloneNode(false);
  clone.removeAttribute('id');
  clone.style.height = rect.height + 'px';
  container.innerHTML = clone.innerHTML = spacerHtml;
  parent.insertBefore(clone, el);
  container.firstChild.appendChild(el);
  return clone;
};

cloneCol = function(container, el, rect, parent, nodeOffset, index) {
  var clone, cloneRows, i, nodeIndex, row, rows, spacerHtml, _i, _j, _len, _len1;
  rows = parent.parentNode.children;
  spacerHtml = '';
  for (_i = 0, _len = rows.length; _i < _len; _i++) {
    row = rows[_i];
    spacerHtml += "<tr class=" + row.className + " style=height:" + row.offsetHeight + "px;width:0;padding:0>";
  }
  container.innerHTML = spacerHtml;
  clone = el.cloneNode(false);
  clone.removeAttribute('id');
  clone.setAttribute('rowspan', rows.length);
  clone.style.padding = 0;
  clone.style.width = rect.width + 'px';
  nodeIndex = index + nodeOffset;
  parent.insertBefore(clone, parent.childNodes[nodeIndex + 1]);
  cloneRows = container.firstChild.children;
  for (i = _j = 0, _len1 = rows.length; _j < _len1; i = ++_j) {
    row = rows[i];
    cloneRows[i].appendChild(row.childNodes[nodeIndex]);
  }
  return clone;
};

finishRow = function(cancel) {
  this.parent.removeChild(this.clone);
  this.parent.insertBefore(dragging.el, this.parent.childNodes[this.index + this.nodeOffset]);
  if (!cancel) {
    return onRowMove(this.index, this.last);
  }
};

finishCol = function(cancel) {
  var cloneRows, i, nodeIndex, row, rows, _i, _len;
  this.parent.removeChild(this.clone);
  rows = this.parent.parentNode.children;
  cloneRows = this.container.firstChild.children;
  nodeIndex = this.index + this.nodeOffset;
  for (i = _i = 0, _len = rows.length; _i < _len; i = ++_i) {
    row = rows[i];
    row.insertBefore(cloneRows[i].firstChild, row.childNodes[nodeIndex]);
  }
  if (!cancel) {
    return onColMove(this.index, this.last);
  }
};
